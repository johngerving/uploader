// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
)

const createPart = `-- name: CreatePart :exec
INSERT INTO parts (upload_id, id, data) VALUES (?, ?, ?)
`

type CreatePartParams struct {
	UploadID string
	ID       int64
	Data     []byte
}

func (q *Queries) CreatePart(ctx context.Context, arg CreatePartParams) error {
	_, err := q.exec(ctx, q.createPartStmt, createPart, arg.UploadID, arg.ID, arg.Data)
	return err
}

const createUpload = `-- name: CreateUpload :one
INSERT INTO uploads (id) VALUES (?) RETURNING id
`

func (q *Queries) CreateUpload(ctx context.Context, id string) (string, error) {
	row := q.queryRow(ctx, q.createUploadStmt, createUpload, id)
	err := row.Scan(&id)
	return id, err
}

const findUploadById = `-- name: FindUploadById :one
SELECT id FROM uploads WHERE id=?
`

func (q *Queries) FindUploadById(ctx context.Context, id string) (string, error) {
	row := q.queryRow(ctx, q.findUploadByIdStmt, findUploadById, id)
	err := row.Scan(&id)
	return id, err
}
