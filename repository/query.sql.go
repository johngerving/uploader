// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
)

const createPart = `-- name: CreatePart :exec
INSERT INTO parts (upload_id, id, data) VALUES (?, ?, ?)
`

type CreatePartParams struct {
	UploadID string
	ID       int64
	Data     []byte
}

func (q *Queries) CreatePart(ctx context.Context, arg CreatePartParams) error {
	_, err := q.exec(ctx, q.createPartStmt, createPart, arg.UploadID, arg.ID, arg.Data)
	return err
}

const createUpload = `-- name: CreateUpload :one
INSERT INTO uploads (id, complete) VALUES (?, 0) RETURNING id, complete
`

func (q *Queries) CreateUpload(ctx context.Context, id string) (Upload, error) {
	row := q.queryRow(ctx, q.createUploadStmt, createUpload, id)
	var i Upload
	err := row.Scan(&i.ID, &i.Complete)
	return i, err
}

const findUploadById = `-- name: FindUploadById :one
SELECT id, complete FROM uploads WHERE id=?
`

func (q *Queries) FindUploadById(ctx context.Context, id string) (Upload, error) {
	row := q.queryRow(ctx, q.findUploadByIdStmt, findUploadById, id)
	var i Upload
	err := row.Scan(&i.ID, &i.Complete)
	return i, err
}

const findUploadPartsById = `-- name: FindUploadPartsById :many
SELECT id from parts WHERE upload_id=? ORDER BY id ASC
`

func (q *Queries) FindUploadPartsById(ctx context.Context, uploadID string) ([]int64, error) {
	rows, err := q.query(ctx, q.findUploadPartsByIdStmt, findUploadPartsById, uploadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
